#AWSTemplateFormatVersion: '2010-09-09'
#Idk if it is important
Description: Assign2 cc-bd
Parameters:
 AvailabilityZoneA:
    Type: String
    Description: First AvailabilityZone
    Default: us-east-1
Resources:
##### idk yet
###### put bucket
  AssetsBucket:
      Type: AWS::S3::Bucket
      ## create
  ####frontend bucket
  ClientBucket:
    Type: AWS::S3::Bucket
    Properties:
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  #######################################      
  OpenSearchPhotos:
    Type: 'AWS::OpenSearchService::Domain'
    Properties:
      DomainName: "photos-template"
      #ElasticsearchVersion: OpenSearch_2.9 #"OpenSearch_2.9"
      EngineVersion: OpenSearch_2.9
      ClusterConfig:
       # InstanceType: r6g.xlarge.search
        DedicatedMasterEnabled: 
        InstanceType: t3.small.search
        InstanceCount: 1
        DedicatedMasterEnabled: false
        ZoneAwarenessEnabled: false
        #WarmEnabled: false
        #ColdStorageOptions: 
        #  Enabled: false
      EBSOptions: 
        EBSEnabled: true
        VolumeType: gp3
        VolumeSize: 10
        Iops: 3000
        Throughput: 125
      AccessPolicies: #|
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: es.amazonaws.com
            Action: es:ESHttpGet
            Resource: arn:aws:es:us-east-1:239946977323:domain/photos-template/*

  Lambda1IndexTemplateRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: IndexTemplate
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: AWSLambdaBasicExecutionRole-769498ce-487a-4e22-99d9-a0aa64f10498
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:*
                Resource: '*'
        - PolicyName: AmazonS3FullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: '*'
        - PolicyName: AmazonRekognitionCustomLabelsFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: rekognition:*
                Resource: '*'
        - PolicyName: AmazonOpenSearchServiceFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: es:*
                Resource: '*'

  #########################################################################################
  #### need to add event trigger 
  Lambda1Indexphotos:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt Lambda1IndexTemplateRole.Arn
      FunctionName: index_photos_template
      Runtime: python3.11
      MemorySize: 128
      Timeout: 123
      Code:
        S3Bucket: my-assign2-codebucket
        S3Key: deploy-index-template.zip
  ###########################################################################################
  Lambda2SearchTemplateRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: SearchTemplate
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: AWSLambdaBasicExecutionRole-769498ce-487a-4e22-99d9-a0aa64f10498
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:*
                Resource: '*'
        - PolicyName: AmazonOpenSearchServiceFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: es:*
                Resource: '*'
        - PolicyName: AmazonS3FullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: '*'
        - PolicyName: AmazonLexFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lex:*
                Resource: '*'
  #### resource based policy
  ######:(
  ############################################################################################
  Lambda2Searchphotos:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt Lambda2SearchTemplateRole.Arn
      FunctionName: search_photos_template
      Runtime: python3.11
      MemorySize: 128
      Timeout: 123
      Code:
        S3Bucket: my-assign2-codebucket
        S3Key: deploy-search-template.zip
  ############################################################################################
  ApiTemplateRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: Assign2GatewayTemplateRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: AmazonS3FullAccess 
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 's3:*'
                    - 's3-object-lambda:*'
                  Resource: '*'
  ############################################################################################
  PhotoApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: Assign2API
      BodyS3Location:
        Bucket: my-assign2-codebucket
        Key: AI Photo Search-First-Stage-swagger-apigateway.yaml
  ############################################################################################
  Outputs:
  WebsiteURL:
    Value: !GetAtt
      - ClientBucket
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - ClientBucket
          - DomainName
    Description: Name of S3 bucket to hold website content