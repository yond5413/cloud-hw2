AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Frontend CI/CD
Parameters:
  GitHubRepo:
    Type: String
    Default: cloud-hw2
  GitHubBranch:
    Type: String
    Default: main
  GitHubToken:
    Type: String
    Default: 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
  GitHubUser:
    Type: String
    Default: yond5413
Resources:
  #### just setup basic stuff for lambdas
  ##### make lambda
  ##### update permissions such that it can access lambdas then check if it worked
  ## update build, deploy
  
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: client-code-build-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource:
                #### add the lambdas
                 # - !Sub arn:aws:s3:::${AssetsBucket}/*
                 # - !Sub arn:aws:s3:::${ClientBucket}/*
                 # - !Sub arn:aws:s3:::${ClientBucket}
                 # lf2 -> !sub in aws
                  - arn:aws:lambda:us-east-1:239946977323:function:search-photos
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:ListObjects
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: code-pipeline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:lambda:us-east-1:239946977323:function:search-photos
                  #- !Sub arn:aws:s3:::${AssetsBucket}/*
                  #- !Sub arn:aws:s3:::${ClientBucket}/*
                  #- !Sub arn:aws:s3:::${ClientBucket}
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:ListObjects
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
              - Resource:
                  - arn:aws:s3:::*
                  - !Sub arn:aws:lambda:us-east-1:239946977323:function:search-photos
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              - Resource: "*"
                Effect: Allow
                Action:
                  - lambda:*

  ClientBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.1
          phases:
            install:
              commands:
                - echo Installing packages for client
                - pip install 
                #- npm install
            build:
              commands:
                - echo Building client
                - pip run build #npm run build
          artifacts:
            files:
              - 'build/**/*'
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: PUBLIC_URL
            Value: '/'
      Name: !Sub ${AWS::StackName}-build-client
      ServiceRole: !Ref CodeBuildServiceRole

  DeployClientBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.1
          phases:
            build:
              commands:
                #- echo Deploying client to S3
                ## build pip deployment
                #- cd ./build && aws s3 cp . s3://$S3_CLIENT_BUCKET --recursive > deploymentResult.txt
                - echo "Zipping deployment packages for lambdas..."
                - zip -r9 deployment_index.zip lambdas/index-photos
                - zip -r9 deployment_search.zip lambdas/search-photos
            post_build:
            commands:
                - echo "Updating Lambda Functions..."
                - aws lambda update-function-code --function-name index-photos --zip-file fileb://deployment_index.zip
                - aws lambda update-function-code --function-name search-photos --zip-file fileb://deployment_search.zip
        #artifacts:
        #  files: build/deploymentResult.txt
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
        Type: "LINUX_CONTAINER"
        #EnvironmentVariables:
        #  - Name: AWS_DEFAULT_REGION
        #    Value: !Ref AWS::Region
        #  - Name: S3_CLIENT_BUCKET
        #    Value: !Ref ClientBucket
      Name: !Sub ${AWS::StackName}-deploy-client
      ServiceRole: !Ref CodeBuildServiceRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      #ArtifactStore:
      #  Type: S3
      #  Location: !Ref AssetsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: ClientBuildStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ClientBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: ClientBuild
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: ClientDeployStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref DeployClientBuildProject
              InputArtifacts:
                - Name: ClientBuild
              OutputArtifacts:
                - Name: ClientDeploymentOutput
              RunOrder: 1